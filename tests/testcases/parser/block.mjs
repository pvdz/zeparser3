/**
 * @generated This file is auto-regenerated by the test runner, and auto-formatted by Prettier
 * @format
 **/
import {
  $ASI,
  $COMMENT,
  $COMMENT_HTML,
  $COMMENT_SINGLE,
  $COMMENT_MULTI,
  $CRLF,
  $EOF,
  $ERROR,
  $IDENT,
  $NL,
  $NUMBER,
  $NUMBER_HEX,
  $NUMBER_DEC,
  $NUMBER_BIN,
  $NUMBER_OCT,
  $NUMBER_OLD,
  $PUNCTUATOR,
  $REGEX,
  $REGEXU,
  $SPACE,
  $STRING,
  $STRING_DOUBLE,
  $STRING_SINGLE,
  $TAB,
  $TICK,
  $TICK_BAD_ESCAPE,
  $TICK_BODY,
  $TICK_HEAD,
  $TICK_PURE,
  $TICK_TAIL,
  $WHITE,
} from '../../../src/zetokenizer.mjs';
export default (describe, test) =>
  describe('block statement', _ => {
    test('empty block', {
      code: '{}',
      ast: {
        type: 'Program',
        body: [
          {
            type: 'BlockStatement',
            body: [],
          },
        ],
      },
      tokens: [$PUNCTUATOR, $PUNCTUATOR],
    });
    test('block with debugger and semi', {
      code: '{debugger;}',
      ast: {
        type: 'Program',
        body: [
          {
            type: 'BlockStatement',
            body: [
              {
                type: 'DebuggerStatement',
              },
            ],
          },
        ],
      },
      tokens: [$PUNCTUATOR, $IDENT, $PUNCTUATOR, $PUNCTUATOR],
    });
    test('block with debugger and semi with newlines', {
      code: '{\n  debugger;\n}',
      ast: {
        type: 'Program',
        body: [
          {
            type: 'BlockStatement',
            body: [
              {
                type: 'DebuggerStatement',
              },
            ],
          },
        ],
      },
      tokens: [$PUNCTUATOR, $IDENT, $PUNCTUATOR, $PUNCTUATOR],
    });
    test('block with debugger and asi', {
      code: '{debugger}',
      ast: {
        type: 'Program',
        body: [
          {
            type: 'BlockStatement',
            body: [
              {
                type: 'DebuggerStatement',
              },
            ],
          },
        ],
      },
      tokens: [$PUNCTUATOR, $IDENT, $ASI, $PUNCTUATOR],
    });
    describe('regex edge case', _ => {
      test('sans flag 1', {
        code: '{}\n/foo/',
        ast: {
          type: 'Program',
          body: [
            {
              type: 'BlockStatement',
              body: [],
            },
            {
              type: 'ExpressionStatement',
              expression: {
                type: 'Literal',
                value: null,
                regex: {
                  pattern: 'foo',
                  flags: '',
                },
                raw: '/foo/',
              },
            },
          ],
        },
        desc: 'no ASI is attempted because the block does not expect a semi so this is fine',
        tokens: [$PUNCTUATOR, $PUNCTUATOR, $REGEX, $ASI],
      });
      test('sans flag 2', {
        code: '{}\n/foo/g',
        ast: {
          type: 'Program',
          body: [
            {
              type: 'BlockStatement',
              body: [],
            },
            {
              type: 'ExpressionStatement',
              expression: {
                type: 'Literal',
                value: null,
                regex: {
                  pattern: 'foo',
                  flags: 'g',
                },
                raw: '/foo/g',
              },
            },
          ],
        },
        desc: 'no ASI is attempted because the block does not expect a semi so this is fine',
        tokens: [$PUNCTUATOR, $PUNCTUATOR, $REGEX, $ASI],
      });
    });
  });
