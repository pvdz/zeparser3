/**
 * @generated This file is auto-regenerated by the test runner, and auto-formatted by Prettier
 * @format
 **/

import {
  $ASI,
  $COMMENT,
  $COMMENT_HTML,
  $COMMENT_SINGLE,
  $COMMENT_MULTI,
  $CRLF,
  $EOF,
  $ERROR,
  $IDENT,
  $NL,
  $NUMBER,
  $NUMBER_HEX,
  $NUMBER_DEC,
  $NUMBER_BIN,
  $NUMBER_OCT,
  $NUMBER_OLD,
  $PUNCTUATOR,
  $REGEX,
  $REGEXU,
  $SPACE,
  $STRING,
  $STRING_DOUBLE,
  $STRING_SINGLE,
  $TAB,
  $TICK,
  $TICK_BAD_ESCAPE,
  $TICK_BODY,
  $TICK_HEAD,
  $TICK_PURE,
  $TICK_TAIL,
  $WHITE,
} from '../../../src/zetokenizer.mjs';

export default (describe, test) =>
  describe('false keyword', _ => {
    test('as a statement', {
      code: 'false',
      ast: {
        type: 'Program',
        body: [
          {
            type: 'ExpressionStatement',
            expression: {
              type: 'Literal',
              value: false,
              raw: 'false',
            },
          },
        ],
      },
      tokens: [$IDENT, $ASI],
    });
    test('as an expression', {
      code: '+false',
      ast: {
        type: 'Program',
        body: [
          {
            type: 'ExpressionStatement',
            expression: {
              type: 'UnaryExpression',
              operator: '+',
              prefix: true,
              argument: {
                type: 'Literal',
                value: false,
                raw: 'false',
              },
            },
          },
        ],
      },
      tokens: [$PUNCTUATOR, $IDENT, $ASI],
    });
    test('regex test bad', {
      code: 'false\n/foo/;',
      throws: 'Expected to parse a value',
      desc: 'ASI cannot apply so this must be a division and it will fail',
      tokens: [],
    });
    test('regex test good', {
      code: 'false\n/foo/g;',
      ast: {
        type: 'Program',
        body: [
          {
            type: 'ExpressionStatement',
            expression: {
              type: 'BinaryExpression',
              left: {
                type: 'BinaryExpression',
                left: {
                  type: 'Literal',
                  value: false,
                  raw: 'false',
                },
                operator: '/',
                right: {
                  type: 'Identifier',
                  name: 'foo',
                },
              },
              operator: '/',
              right: {
                type: 'Identifier',
                name: 'g',
              },
            },
          },
        ],
      },
      desc: 'ASI cannot apply so this must be a division which passes because of the `g` "flag"; this is `(false/foo)/g`',
      tokens: [$IDENT, $PUNCTUATOR, $IDENT, $PUNCTUATOR, $IDENT, $PUNCTUATOR],
    });
  });
