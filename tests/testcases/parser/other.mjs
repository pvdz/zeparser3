/**
 * @generated This file is auto-regenerated by the test runner, and auto-formatted by Prettier
 * @format
 **/
import {
  $ASI,
  $COMMENT,
  $COMMENT_HTML,
  $COMMENT_SINGLE,
  $COMMENT_MULTI,
  $CRLF,
  $EOF,
  $ERROR,
  $IDENT,
  $NL,
  $NUMBER,
  $NUMBER_HEX,
  $NUMBER_DEC,
  $NUMBER_BIN,
  $NUMBER_OCT,
  $NUMBER_OLD,
  $PUNCTUATOR,
  $REGEX,
  $REGEXU,
  $SPACE,
  $STRING,
  $STRING_DOUBLE,
  $STRING_SINGLE,
  $TAB,
  $TICK,
  $TICK_BAD_ESCAPE,
  $TICK_BODY,
  $TICK_HEAD,
  $TICK_PURE,
  $TICK_TAIL,
  $WHITE,
} from '../../../src/zetokenizer.mjs';
export default (describe, test) =>
  describe('other, unclassified cases', _ => {
    test('bad whitespace should not be ignored', {
      desc: 'from test262 7.4_A2_T2',
      code: `/*CHECK#1/`,
      throws: 'Tokenizer error',
      tokens: [$ERROR],
    });
    test.pass('reading from eval 1', {
      code: 'eval',
    });
    test.pass('reading from eval 2', {
      code: 'log(eval)',
    });
    test.pass('reading from eval 3', {
      code: 'eval.foo',
    });
    test.pass('reading from eval 4', {
      code: 'eval[foo]',
    });
    test.pass('reading from eval 5', {
      code: 'eval.foo = bar',
    });
    test.pass('reading from eval 6', {
      code: 'eval[foo] = bar',
    });
    test.pass('reading from arguments', {
      code: 'arguments; log(arguments); arguments.foo; arguments[foo]; arguments.foo = bar; arguments[foo] = bar;',
    });
    test.pass('asi with CR', {
      code: 'a\rb',
    });
    test.pass('asi with LF', {
      code: 'a\nb',
    });
  });
