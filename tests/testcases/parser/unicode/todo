      // assert.throws(SyntaxError, () => eval("/(?<a\\\\uD801>.)/u"), "\\\\u Lea");
      // assert.throws(SyntaxError, () => eval("/(?<a\\\\uDCA4>.)/u"), "\\\\u Trai");
      // assert(/(?<\\u0041>.)/u.test("a"), "\\\\u NonSurrogate");
      // assert(/(?<\\u{0041}>.)/u.test("a"), "\\\\u{ Non-surrogate }");
      // assert(/(?<a\\u{104A4}>.)/u.test("a"), "\\\\u{ Surrogate, ID_Continue }");
      // assert.throws(SyntaxError, () => eval("/(?<a\\\\u{110000}>.)/u"), "\\\\u{ Out-of-bounds ");
      // assert.throws(SyntaxError, () => eval("/(?<a\\uD801>.)/u"), "Lea");
      // assert.throws(SyntaxError, () => eval("/(?<a\\uDCA4>.)/u"), "Trai");
      // assert(RegExp("(?<\\u{0041}>.)", "u").test("a"), "Non-surrogate");
      // assert(RegExp("(?<a\\u{104A4}>.)", "u").test("a"), "Surrogate,ID_Continue");
      // // Bracketed escapes are not allowed;
      // // 4-char escapes must be the proper ID_Start/ID_Continue
      //     assert.throws(SyntaxError, () => eval("/(?<a\\\\uD801>.)/u"), "Lead");
      //     assert.throws(SyntaxError, () => eval("/(?<a\\\\uDCA4>.)/u"), "Trail");
      //     assert((/(?<\\u{0041}>.)/u).test("a"), "Non-surrogate");
      //     assert(/(?<a\\u{104A4}>.)/u.test("a"), "Surrogate, ID_Continue");
      //     assert(RegExp("(?<\\\\u0041>.)", "u").test("a"), "Non-surrogate");
      //
      // // Backslash is not allowed as ID_Start and ID_Continue
      //     assert.throws(SyntaxError, () => eval("/(?<\\\\>.)/u"), "'\\' misclassified as ID_Start");
      //     assert.throws(SyntaxError, () => eval("/(?<a\\\\>.)/u"), "'\\' misclassified as ID_Continue");
