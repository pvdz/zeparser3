      ['**'].forEach(t15 => {
        ['*', '/', '%'].forEach(t14 => {
          ['+', '-'].forEach(t13 => {
            ['<<', '>>', '>>>'].forEach(t12 => {
              ['<', '<=', '>', '>=', 'in', 'instanceof'].forEach(t11 => {
                ['==', '!=', '===', '!=='].forEach(t10 => {
                  ['&'].forEach(t9 => {
                    ['^'].forEach(t8 => {
                      ['|'].forEach(t7 => {
                        ['&&'].forEach(t6 => {
                          ['||'].forEach(t5 => {
                            // This checks all binary ops per level so this generates a lot of cases..
                            // Randomly throw together some orders and their reverse and yolo it.
                            // (This test is confirmed by comparing to other parsers that hopefully do this right ;)
                            let order1 = [t15, t7, t10, t6, t5, t13, t11, t8, t12, t9, t14];
                            let order2 = [...order1].reverse();
                            let order3 = [t13, t10, t7, t15, t14, t8, t5, t6, t11, t9, t12];
                            let order4 = [...order3].reverse();
                            test.pass('order 1 (generated: ' + [...order1] + ')', {
                              code: 'a @ b @ c @ d @ e @ f @ g @ h @ i @ j @ k'.replace(/@/g, () => order1.pop()),
                            });
                            test.pass('order 2 (generated ' + [...order2] + ')', {
                              code: 'a @ b @ c @ d @ e @ f @ g @ h @ i @ j @ k'.replace(/@/g, () => order2.pop()),
                            });
                            test.pass('order 3 (generated ' + [...order3] + ')', {
                              code: 'a @ b @ c @ d @ e @ f @ g @ h @ i @ j @ k'.replace(/@/g, () => order3.pop()),
                            });
                            test.pass('order 4 (generated ' + [...order4] + ')', {
                              code: 'a @ b @ c @ d @ e @ f @ g @ h @ i @ j @ k'.replace(/@/g, () => order4.pop()),
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
