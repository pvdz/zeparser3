// TODO: mirror tests for all functions (regular, expr, arrow, objlit method, class method)
// TODO: function statements not okay in ES5 strict mode but okay before/after/outside

// TODO: test this under an es5 flag. for es6+ this is legal (again)
      // describe('illegal statements in strict mode', _ => {
      //   test('inside while', {
      //     code: `while (false) function g() {}`,
      //     throws: 'Function statement',
      //     SLOPPY_SCRIPT: {
      //       ast: {
      //         type: 'Program',
      //         body: [
      //           {
      //             type: 'WhileStatement',
      //             test: {type: 'Literal', value: false, raw: 'false'},
      //             body: {
      //               type: 'FunctionDeclaration',
      //               generator: false,
      //               async: false,
      //      //               id: {type: 'Identifier', name: 'g'},
      //               params: [],
      //               body: {type: 'BlockStatement', body: []},
      //             },
      //           },
      //         ],
      //       },
      //     },
      //     tokens: [$IDENT, $PUNCTUATOR, $IDENT, $PUNCTUATOR, $IDENT, $IDENT, $PUNCTUATOR, $PUNCTUATOR, $PUNCTUATOR, $PUNCTUATOR],
      //   });
      //
      //   test('inside if', {
      //     code: `if (false) function g() {}`,
      //     throws: 'Function statement',
      //   });
      //
      //   test('inside else', {
      //     code: `if (false) foo; else function g() {}`,
      //     throws: 'Function statement',
      //   });
      //
      //   test('inside for', {
      //     code: `for (a in b) function g() {}`,
      //     throws: 'Function statement',
      //   });
      //
      //   test('inside do', {
      //     code: `do function g() {} while (false)`,
      //     throws: 'Function statement',
      //   });
      //
      //   test('inside label', {
      //     code: `foo: function g() {}`,
      //     throws: 'Function statement',
      //   });
      //
      //   test('deep nested', {
      //     code: `if (x) if (x) if (x) if (x) if (x) if (x) function g() {}`,
      //     throws: 'Function statement',
      //   });
      //
      //   test('inside block', {
      //     code: `{ function g() {} }`,
      //   });
      //
      //   test('inside nested block', {
      //     code: `{{{ function g() {} }}}`,
      //     desc: 'make sure lexerflags get reset on block boundary',
      //   });
      //
      //   test('preceded by other statement in a block', {
      //     code: `
      //     {
      //       if (x) y;
      //       function g() {}
      //     }
      //   `,
      //     desc: 'slightly redundant but lexerflags should not flow over from previous statement',
      //   });
      //
      //   test('nested inside block', {
      //     code: `if (x) { function g() {} }`,
      //     desc: 'block should reset lexerflags',
      //   });
      //
      //   test('preceded by other statement in a nested block', {
      //     code: `
      //     if (z) {
      //       if (x) y;
      //       function g() {}
      //     }
      //   `,
      //     desc: 'make sure lexerflags get reset on block boundary',
      //   });
      // });
